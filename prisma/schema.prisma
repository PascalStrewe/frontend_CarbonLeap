// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    Int                   @id @default(autoincrement())
  email                 String                @unique
  password              String
  isAdmin               Boolean               @default(false)
  domain                Domain                @relation(fields: [domainId], references: [id])
  domainId              Int
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  interventionRequests  InterventionRequest[]
  
  // **Added Relation Field for Transfers Created by User**
  createdTransfers      Transfer[]            @relation("UserCreatedTransfers")
}

model Domain {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @unique
  companyName             String
  users                   User[]
  interventions           Intervention[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  transfersOut            Transfer[]               @relation("SourceDomain")
  transfersIn             Transfer[]               @relation("TargetDomain")
  partnershipsAsFirst     DomainPartnership[]      @relation("PartnershipDomain1")
  partnershipsAsSecond    DomainPartnership[]      @relation("PartnershipDomain2")
  notifications           Notification[]
}

model Intervention {
  id            Int          @id @default(autoincrement())
  domain        Domain       @relation(fields: [domainId], references: [id])
  domainId      Int
}

model InterventionRequest {
  id                        String    @id @default(cuid())
  userId                    Int       // Made required by removing the ?
  
  // **New Fields Added as Nullable to Facilitate Migration**
  clientName                String?   // Will be set to non-nullable in a subsequent migration
  emissionsAbated           Float?    // Will be set to non-nullable in a subsequent migration
  date                      DateTime? // Will be set to non-nullable in a subsequent migration
  interventionId            String?   @unique // Will be set to non-nullable in a subsequent migration
  
  modality                  String
  vesselType               String?
  geography                String
  lowCarbonFuelLiters      String?
  lowCarbonFuelMT          String?
  scope3EmissionsAbated    String?
  ghgEmissionSaving        String
  vintage                  String
  lowCarbonFuel            String    @default("n/a")
  feedstock                String    @default("n/a")
  causality                Boolean?  // Changed to Boolean and nullable for migration
  additionality            Boolean?  // Changed to Boolean and nullable for migration
  thirdPartyVerification   String
  certificationScheme      String    @default("n/a")
  otherCertificationScheme String?
  standards                String
  status                   String
  notificationSent         Boolean    @default(false)
  submissionDate           DateTime   @default(now())
  reviewedAt               DateTime?
  reviewedBy               String?
  comments                 String?
  transfersOut             Transfer[] @relation("SourceIntervention")
  remainingAmount          String     @default("0") // Track remaining transferable amount

  user                     User       @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([clientName]) // Added index for clientName for faster queries
}

model Transfer {
  id                    String              @id @default(cuid())
  sourceIntervention    InterventionRequest @relation("SourceIntervention", fields: [sourceInterventionId], references: [id])
  sourceInterventionId  String
  sourceDomain          Domain              @relation("SourceDomain", fields: [sourceDomainId], references: [id])
  sourceDomainId        Int
  targetDomain          Domain              @relation("TargetDomain", fields: [targetDomainId], references: [id])
  targetDomainId        Int
  amount                Float               // Changed to Float for numeric COâ‚‚ amounts
  status                String              @default("pending") // pending, completed, cancelled
  createdAt             DateTime            @default(now())
  completedAt           DateTime?
  notes                 String?             // Removed duplicate 'notes' field
  createdBy             User                @relation("UserCreatedTransfers", fields: [createdById], references: [id])
  createdById           Int

  @@index([status])
  // Removed @@index([transferCode]) as there is no transferCode field
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // TRANSFER_APPROVED, TRANSFER_REJECTED, etc.
  message   String
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  Int
  metadata  Json?    // Additional data specific to notification type
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([domainId])
  @@index([type])
}

model DomainPartnership {
  id                Int      @id @default(autoincrement())
  domain1           Domain   @relation("PartnershipDomain1", fields: [domain1Id], references: [id])
  domain1Id         Int
  domain2           Domain   @relation("PartnershipDomain2", fields: [domain2Id], references: [id])
  domain2Id         Int
  status            String   @default("pending") // pending, active, inactive
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([domain1Id, domain2Id])
  @@index([domain1Id])
  @@index([domain2Id])
}
